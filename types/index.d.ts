// Generated by dts-bundle-generator v9.5.1

export declare class EmptyStackException extends Error {
}
export declare class EmptyQueueException extends Error {
}
export type SearchPredicate<E> = (item: E) => boolean;
/**
 * @since 1.0.0
 */
export declare class Collection<E = unknown> implements Iterable<E> {
	/**
	 * Collection elements.
	 * @protected
	 */
	protected internalElements: E[];
	/**
	 * Creates a collection.
	 * @param iterable An iterable object to initialize this collection
	 * (optional).
	 * @param reversed Whether to reverse the order of elements (default: true).
	 */
	constructor(iterable?: Iterable<E>, reversed?: boolean);
	/**
	 * Retrieves an element.
	 * @param index The index of the element to retrieve
	 */
	get(index: number): E;
	/**
	 * Returns an iterator for the collection.
	 */
	[Symbol.iterator](): IterableIterator<E>;
	/**
	 * Gets the elements array of this collection.
	 * @since 0.1.0
	 */
	get elements(): E[];
	/**
	 * Returns the number of elements in this collection.
	 * @return The number of elements.
	 */
	size(): number;
	/**
	 * Tests if the collection is empty.
	 * @return True if the collection contains no items, false otherwise.
	 */
	empty(): boolean;
	/**
	 * Iterates over elements in this collection, applying the callback
	 * function.
	 * @param callback The function to apply to each element.
	 * @since 0.1.0
	 */
	each(callback: (value: E, index?: number, array?: E[]) => void): void;
	/**
	 * Iterates over elements in reverse order, applying the callback function.
	 * @param callback The function to apply to each element.
	 * @since 0.1.0
	 */
	inverseEach(callback: (value: E, index?: number, array?: E[]) => void): void;
	/**
	 * Finds the first element that matches the predicate.
	 * @param predicate The function to test each element.
	 * @return The 1-based position of the item, or -1 if not found.
	 */
	find(predicate: SearchPredicate<E>): number;
	/**
	 * Searches for the position of an item in the collection.
	 * @param item The item to search for.
	 * @return The 0-based position from the beginning of the collection, or -1
	 * if not found.
	 */
	search(item: E): number;
	/**
	 * Add elements to the collection.
	 * @param iterable An iterable object to initialize this collection
	 * (optional).
	 * @param reversed Whether to reverse the order of elements (default: true).
	 */
	addAll(iterable?: Iterable<E>, reversed?: boolean): void;
}
/**
 * @author James Chen
 */
export declare class Queue<E = unknown> extends Collection<E> {
	/**
	 * Insert the specified element into this queue.
	 * @param item the item to insert
	 */
	enqueue(item: E): E;
	/**
	 * (when <count> is default) Retrieves and remove the head of this queue.
	 * This method differs from poll() only in that it throws an exception if
	 * this queue is empty. (when <count> is greater than 1) Executes <count>
	 * times of dequeue and return the last item. Item traveled will be removed,
	 * including the returned one.
	 * @param count the number of times executing dequeue, default by 1
	 * @return the head of this queue or the last dequeue item
	 * @throws EmptyQueueException (when <count> is default) if this queue is
	 *         empty
	 * @throws EmptyQueueException (when <count> is greater than 1) if this
	 *         queue is empty when the last queue is being executed
	 */
	dequeue(count?: number): E;
	/**
	 * Retrieves and remove the head of this queue, or returns null if this
	 * queue is empty.
	 * @return the head of this queue, or null if this queue is empty
	 */
	poll(): E | null;
	/**
	 * Retrieves, but does not remove, the head of this queue.
	 * This method differs from peek() only in that it throws an exception if
	 * this queue is empty.
	 * @return the head of this queue
	 * @throws EmptyQueueException if this queue is empty
	 */
	element(): E;
	/**
	 * Retrieves, but does not remove, the head of this queue, or returns null
	 * if this queue is empty.
	 * @return the head of this queue, or null if this queue is empty
	 */
	peek(): E | null;
	enqueueAll(iterator: Iterable<E>): void;
}
/**
 * @author James Chen
 */
export declare class Stack<E = unknown> extends Collection<E> {
	[Symbol.iterator](): IterableIterator<E>;
	/**
	 * Pushes an item onto the top of this stack.
	 * @param item the item to push onto this stack
	 * @return the item argument
	 */
	push(item: E): E;
	/**
	 * (when <count> is default) Pops an item from this stack and returns it.
	 * The item popped is removed from this stack.
	 * This method differs from poll() only in that it throws an exception if
	 * this stack is empty. (when <count> is greater than 1) Executes <count>
	 * times of pop and return the last item.
	 * Item traveled will be removed, including the returned one.
	 * @param count the number of times executing pop, the default value is 1
	 * @return the item popped from this stack or the last pop item
	 * @throws EmptyStackException (when <count> is default) if this stack is
	 *         empty
	 * @throws EmptyStackException (when <count> is greater than 1) if the
	 *         length of this stack is less than <count>. In this case, this
	 *         function pops all elements and throw the exception.
	 * last pop is being executed
	 */
	pop(count?: number): E;
	/**
	 * Pops an item from this stack and returns it, or returns null if this
	 * stack is empty. The item popped is removed from this stack.
	 * @return the top item on this stack, or null if the stack is empty
	 */
	poll(): E | null;
	/**
	 * Returns the top item on this stack without removing it.
	 * This method differs from peek() only in that it throws an exception if
	 * this stack is empty.
	 * @return the top item on this stack
	 * @throws EmptyStackException if this stack is empty
	 */
	element(): E;
	/**
	 * Returns the top item on this stack without removing it, or returns null
	 * if this stack is empty.
	 * @return the top item on this stack
	 * @throws EmptyStackException if this stack is empty
	 */
	peek(): E | null;
	/**
	 * Iterates over elements in this collection, applying the callback
	 * function.
	 * @param callback The function to apply to each element.
	 * @since 0.1.0
	 */
	each(callback: (value: E, index?: number, array?: E[]) => void): void;
	/**
	 * Iterates over elements in reverse order, applying the callback function.
	 * @param callback The function to apply to each element.
	 * @since 0.1.0
	 */
	inverseEach(callback: (value: E, index?: number, array?: E[]) => void): void;
	/**
	 * Pushes a collection of elements onto the stack.
	 * @param iterator The collection of elements to push onto the stack
	 */
	pushAll(iterator: Iterable<E>): void;
	/**
	 * Searches for the position of an item in the stack.
	 * @param item The item to search for.
	 * @return The 0-based position from the top of the stack, or -1 if
	 * not found.
	 */
	search(item: E): number;
}

export {};
